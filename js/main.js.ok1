// Save as: js/main.js (final version)
import * as api from './api.js';
import {
    elements,
    initializeMap,
    updateMapCoverage,
    updateAircraftPosition,
    populateSdwnDropdown,
    getJobParameters,
    toggleConnectionState,
    renderSvgButtons,
    toggleMapSelectionMode,
    showIcaoMode,
    showTileInPanel,
    previewArea,
    clearPreview,
    setupInteractiveSelection
} from './ui.js';

// --- Global State ---
const state = {
    isConnected: false,             // FlightGear connection status
    isMapSelectionMode: false,      // Whether map coordinate selection is active
    currentOpacity: 0.4,            // Current opacity level for map coverage
    resState: Array(7).fill(true),   // Active/inactive state for each resolution filter
    hasPreview: false,
    previewAreas: [],
    isDragging: false
};

const activeCircles = {};           // Stores active job circles on the map
let pendingCircle = null;           // Temporary Leaflet circle object

/**
 * Main update loop that runs periodically
 * - Updates aircraft position if connected
 * - Updates map coverage with current filters and opacity
 */
function mainUpdateLoop() {
    if (state.isConnected) {
        api.getFgfsStatus().then(updateAircraftPosition);
    }

    api.getCoverageData().then(coverageData => {
        const allowedResolutions = new Set(
            state.resState.map((active, i) => active ? i : -1).filter(i => i !== -1)
        );
        updateMapCoverage(coverageData, allowedResolutions, state.currentOpacity);
    });
}

/**
 * Handles resolution filter button clicks
 * @param {number} index - Index of the clicked resolution filter
 */
function handleResFilterClick(index) {
    state.resState[index] = !state.resState[index];
    renderSvgButtons(state.resState, handleResFilterClick);
    mainUpdateLoop();
}

// ------------------------------------------------------------------
// 1. Queue Badge (always shows â‰¥ 0)
// ------------------------------------------------------------------
function updateQueueBadge() {
    fetch('/api/queue-size')
    .then(r => r.json())
    .then(len => {
        document.getElementById('badge').textContent = len;
    });
}

// ------------------------------------------------------------------
// 2. Draw/Clear transparent green circles for jobs
// ------------------------------------------------------------------

function updateCoordinates(lat, lon) {
    elements.latInput.value = lat.toFixed(6);
    elements.lonInput.value = lon.toFixed(6);
    elements.icaoInput.value = `Coords: ${lat.toFixed(4)}, ${lon.toFixed(4)}`;
}

function updatePreview() {
    if (elements.latInput.value && elements.lonInput.value && elements.radiusInput.value) {
        previewArea(
            parseFloat(elements.latInput.value),
                    parseFloat(elements.lonInput.value),
                    parseFloat(elements.radiusInput.value)
        );
        state.hasPreview = true;

        // Centra la mappa sull'area selezionata
        elements.map.setView(
            [parseFloat(elements.latInput.value), parseFloat(elements.lonInput.value)],
                             elements.map.getZoom()
        );
    }
}

/**
 * Draws a circle on the map for a job
 * @param {string} jobId - Unique job identifier
 * @param {number} lat - Latitude coordinate
 * @param {number} lon - Longitude coordinate
 * @param {number} radiusKm - Circle radius in kilometers
 */
function drawCircle(jobId, lat, lon, radiusKm) {
    if (activeCircles[jobId]) return;

    const circle = L.circle([lat, lon], {
        radius: radiusKm * 1852,
        color: '#00cc00',
        fillColor: '#00cc00',
        fillOpacity: 0.15,
        weight: 1.5
    }).addTo(elements.map);

    activeCircles[jobId] = circle;
}

/**
 * Removes a job circle from the map
 * @param {string} jobId - Unique job identifier
 */
function clearCircle(jobId) {
    if (activeCircles[jobId]) {
        elements.map.removeLayer(activeCircles[jobId]);
        delete activeCircles[jobId];
    }
}

/**
 * Checks for and clears circles of completed jobs
 */
function checkCompletedJobs() {
    api.getCompletedJobs().then(completedIds => {
        if (completedIds.length > 0) {
            console.log("Completed jobs:", completedIds);
            completedIds.forEach(id => clearCircle(id));
        }
    });
}

// ------------------------------------------------------------------
// 3. Event Handling
// ------------------------------------------------------------------

elements.map.on('click', (e) => {
    import { linkRadiusHandleToInput } from './ui.js';
    const circle = previewArea(lat, lng, radiusNm);
    linkRadiusHandleToInput(circle);

    if (state.isDragging) return;
    if (!state.isMapSelectionMode) return;

    let radiusNm = parseFloat(elements.radiusInput.value) || 3;
    if (radiusNm < 3) radiusNm = 3;
    elements.radiusInput.value = radiusNm;

    const { lat, lng } = e.latlng;
    updateCoordinates(lat, lng);

    const circle = previewArea(lat, lng, radiusNm);
    const areaState = { lat, lon: lng, radius: radiusNm, circle, isFixed: false };
    state.previewAreas.push(areaState);

    /* --- Bottoni e la loro logica (invariata) --- */
    const btnGroup = L.layerGroup().addTo(elements.map);
    const rLatDeg = circle.getRadius() / 111320;
    const okBtn = L.marker([lat + rLatDeg, lng], {
        icon: L.divIcon({ html: '<button class="mini-btn ok">âœ“</button>', className: 'mini-btn-container', iconSize: [22, 22], iconAnchor: [11, 11] })
    }).addTo(btnGroup);
    const delBtn = L.marker([lat - rLatDeg, lng], {
        icon: L.divIcon({ html: '<button class="mini-btn del">ðŸ—‘</button>', className: 'mini-btn-container', iconSize: [22, 22], iconAnchor: [11, 11] })
    }).addTo(btnGroup);

    okBtn.on('click', (event) => { /* ... logica okBtn ... */ });
    delBtn.on('click', (event) => { /* ... logica delBtn ... */ });

    /* --- Funzione di supporto per aggiornare i bottoni (invariata) --- */
    const updateButtons = () => {
        if (areaState.isFixed) return;
        const centre = circle.getLatLng();
        /*  NEW â†’ keep the form in sync */
        updateCoordinates(centre.lat, centre.lng);
        const rLatDeg = circle.getRadius() / 111320;
        okBtn.setLatLng([centre.lat + rLatDeg, centre.lng]);
        delBtn.setLatLng([centre.lat - rLatDeg, centre.lng]);
    };

    /* --- GESTIONE DEGLI EVENTI (SEZIONE CORRETTA E DEFINITIVA) --- */

    // 1. Logica per evitare i click fantasma (completa)
    const onDragStart = () => { state.isDragging = true; };
    const onDragEnd = () => { setTimeout(() => { state.isDragging = false; }, 50); };
    circle.on('pm:dragstart', onDragStart);
    circle.on('pm:markerdragstart', onDragStart);
    circle.on('pm:dragend', onDragEnd);
    circle.on('pm:markerdragend', onDragEnd);

    // 2. GESTORE UNICO E "INTELLIGENTE" PER DRAG E RESIZE
    circle.on('drag', (e) => {
        console.log("Evento pm:markerdrag ATTIVATO!");
        if (areaState.isFixed) return;
        console.log("Evento pm:markerdrag ATTIVATO!");

        const currentCenter = e.target.getLatLng();
        const currentRadiusMeters = e.target.getRadius();
        const currentRadiusNm = currentRadiusMeters / 1852;

        // Controlla se il raggio Ã¨ cambiato (l'utente sta ridimensionando)
        if (Math.abs(currentRadiusNm - areaState.radius) > 0.01) {

            // Logica di auto-cancellazione
            if (currentRadiusNm < 3) {
                elements.map.removeLayer(circle);
                elements.map.removeLayer(btnGroup);
                const idx = state.previewAreas.findIndex(a => a.circle === circle);
                if (idx !== -1) state.previewAreas.splice(idx, 1);
                return;
            }
            // Aggiorna il campo di input e lo stato del raggio
            elements.radiusInput.value = currentRadiusNm.toFixed(2);
            areaState.radius = currentRadiusNm;
        }

        // Aggiorna sempre le coordinate e la posizione dei bottoni
        updateCoordinates(currentCenter.lat, currentCenter.lng);
        areaState.lat = currentCenter.lat;
        areaState.lon = currentCenter.lng;
        updateButtons();
    });
});




// ------------------------------------------------------------------
// 4. Initialization
// ------------------------------------------------------------------
initializeMap();
populateSdwnDropdown();
renderSvgButtons(state.resState, handleResFilterClick);
setupInteractiveSelection();

// Set up periodic updates
setInterval(updateQueueBadge, 1000);        // Update queue every 2 seconds
setInterval(checkCompletedJobs, 3000);      // Check completed jobs every 3 seconds
setInterval(mainUpdateLoop, 5000);          // Main update every 5 seconds

mainUpdateLoop();  // Initial update on startup
