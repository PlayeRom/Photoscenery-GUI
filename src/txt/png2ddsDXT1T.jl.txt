#!/usr/bin/env julia
# png2ddsDXT1.jl - Optimized for memory & speed (KIMI 2025-07-16 + enhancements)
module png2ddsDXT1T

using Colors, FixedPointNumbers, Base.Threads

export convert, generate_dds_bytes

# -------------------------------
# Configuration
const QUIET = false  # Set to true for benchmarking (no println)

# -------------------------------
# Utility: high-resolution timer
time_it(f) = let start = time_ns(); (f(), (time_ns() - start) / 1e9) end

# -------------------------------
# RGB565 helpers (inlined)
@inline rgba_to_rgb565(c::RGBA{N0f8}) =
    (round(UInt16, red(c)   * 31) << 11) |
    (round(UInt16, green(c) * 63) << 5 ) |
     round(UInt16, blue(c)  * 31)

@inline dist565(a::UInt16, b::UInt16) = abs(Int(a) - Int(b))

@inline function distant_pair(c::NTuple{16,UInt16})
    best_c0, best_c1, best_d = c[1], c[2], dist565(c[1], c[2])
    @inbounds for i in 1:15
        for j in i+1:16
            d = dist565(c[i], c[j])
            if d > best_d
                best_c0, best_c1, best_d = c[i], c[j], d
                if d == 2047  # Max possible in RGB565 (all bits differ)
                    return best_c0, best_c1
                end
            end
        end
    end
    best_c0 >= best_c1 ? (best_c0, best_c1) : (best_c1, best_c0)
end

@inline function palette(c0::UInt16, c1::UInt16)
    r0 = (c0 >> 11) & 0x1f; g0 = (c0 >> 5) & 0x3f; b0 = c0 & 0x1f
    r1 = (c1 >> 11) & 0x1f; g1 = (c1 >> 5) & 0x3f; b1 = c1 & 0x1f
    c2 = (((r0 * 2 + r1) ÷ 3) << 11) | (((g0 * 2 + g1) ÷ 3) << 5) | ((b0 * 2 + b1) ÷ 3)
    c3 = (((r0 + r1 * 2) ÷ 3) << 11) | (((g0 + g1 * 2) ÷ 3) << 5) | ((b0 + b1 * 2) ÷ 3)
    (c0, c1, c2 % UInt16, c3 % UInt16)
end

@inline function best_index(c::UInt16, p0::UInt16, p1::UInt16, p2::UInt16, p3::UInt16)
    d0 = dist565(c, p0)
    d1 = dist565(c, p1)
    d2 = dist565(c, p2)
    d3 = dist565(c, p3)
    return d0 ≤ d1 && d0 ≤ d2 && d0 ≤ d3 ? 0 :
           d1 ≤ d2 && d1 ≤ d3         ? 1 :
           d2 ≤ d3                   ? 2 : 3
end

@inline pack_block(c0::UInt16, c1::UInt16, idx::UInt32) = (
    c0 % UInt8,
    (c0 >> 8) % UInt8,
    c1 % UInt8,
    (c1 >> 8) % UInt8,
    idx % UInt8,
    (idx >> 8) % UInt8,
    (idx >> 16) % UInt8,
    (idx >> 24) % UInt8
)

# -------------------------------
# Compress one 4×4 block from RGB565 data
@inline function compress_block_rgb565(pixels::NTuple{16,UInt16})
    c0, c1 = distant_pair(pixels)
    p0, p1, p2, p3 = palette(c0, c1)
    idx = 0x00000000
    @inbounds for i in 1:16
        ip = best_index(pixels[i], p0, p1, p2, p3)
        idx |= UInt32(ip) << (2 * (i - 1))
    end
    pack_block(c0, c1, idx)
end

# -------------------------------
# Pad and convert RGBA image to RGB565 (UInt16 matrix)
function pad_and_convert(img::Matrix{RGBA{N0f8}})
    h, w = size(img)
    padded_h = (h + 3) & ~3
    padded_w = (w + 3) & ~3
    padded = Array{UInt16}(undef, padded_h, padded_w)
    @inbounds for j in 1:padded_w, i in 1:padded_h
        if i <= h && j <= w
            padded[i, j] = rgba_to_rgb565(img[i, j])
        else
            padded[i, j] = 0x0000
        end
    end
    padded
end

# -------------------------------
# Shared-buffer multithreaded compression
function compress_blocks_parallel(rgb565::Matrix{UInt16}, blocks_x::Int, blocks_y::Int, num_threads::Int)
    total_blocks = blocks_x * blocks_y
    buffer = Vector{UInt8}(undef, total_blocks * 8)  # One 8-byte block per 4x4 tile

    # Distribute blocks across threads
    nthreads = min(num_threads, Threads.nthreads())
    ranges = [range for range in Iterators.partition(1:total_blocks, cld(total_blocks, nthreads))]

    Threads.@threads for range in ranges
        pos = (range.start - 1) * 8 + 1  # Global write position
        @inbounds for b in range
            y = 4 * ((b - 1) ÷ blocks_x)
            x = 4 * ((b - 1) % blocks_x)
            pixels = ntuple(i -> rgb565[y + (i-1)÷4 + 1, x + (i-1)%4 + 1], 16)
            compressed = compress_block_rgb565(pixels)
            for byte in compressed
                buffer[pos] = byte
                pos += 1
            end
        end
    end

    buffer
end

# -------------------------------
# DDS Header (unchanged, just cleaned up)
function create_dds_header(w::UInt32, h::UInt32, mipmaps::UInt32 = 1)
    header = zeros(UInt8, 128)
    header[1:4] = b"DDS "                                    # Magic
    header[5:8]  .= reinterpret(UInt8, UInt32[124])         # dwSize
    flags = 0x00001007 | 0x00000008 | 0x00080000             # Required flags
    header[9:12] .= reinterpret(UInt8, UInt32[flags])
    header[13:16] .= reinterpret(UInt8, UInt32[h])
    header[17:20] .= reinterpret(UInt8, UInt32[w])
    pitch = (w * h) ÷ 2
    header[21:24] .= reinterpret(UInt8, UInt32[pitch])
    header[29:32] .= reinterpret(UInt8, UInt32[mipmaps])
    header[77:80] .= reinterpret(UInt8, UInt32[32])         # Pixel format size
    header[81:84] .= reinterpret(UInt8, UInt32[0x00000004]) # Flags = DXT1
    header[85:88] = b"DXT1"                                 # FourCC
    header[109:112] .= reinterpret(UInt8, UInt32[0x00001000]) # Caps
    header
end

# -------------------------------
# Generate full DDS binary data (header + compressed blocks)
function generate_dds_bytes(img::Matrix{RGBA{N0f8}}, num_threads::Int = 1)
    h, w = size(img)
    megapixels = (h * w) / 1_000_000.0

    result, elapsed = time_it() do
        # Step 1: Pad and convert to RGB565
        rgb565 = pad_and_convert(img)
        padded_h, padded_w = size(rgb565)
        blocks_x, blocks_y = padded_w ÷ 4, padded_h ÷ 4

        # Step 2: Compress all blocks into shared buffer
        blocks_data = compress_blocks_parallel(rgb565, blocks_x, blocks_y, num_threads)

        # Step 3: Create header and concatenate
        header = create_dds_header(w % UInt32, h % UInt32, 1)
        vcat(header, blocks_data)
    end

    !QUIET && println("Total time: $(round(elapsed, digits=3)) s")
    !QUIET && println("MP/s: $(round(megapixels / elapsed, digits=2))")

    return result
end

# -------------------------------
# API Functions (backward compatible + enhanced)

# From file → file
function convert(input_png::String, output_dds::String, num_threads::Int = 1)
    img = load(input_png)
    dds_data = generate_dds_bytes(img, num_threads)
    write(output_dds, dds_data)
    !QUIET && println("Saved: $output_dds")
    return dds_data
end

# From Matrix → file
function convert(img::Matrix{RGBA{N0f8}}, output_dds::String, num_threads::Int = 1)
    dds_data = generate_dds_bytes(img, num_threads)
    write(output_dds, dds_data)
    !QUIET && println("Saved: $output_dds")
    return dds_data
end

# From Matrix → binary (ideal for your analyzer app)
function convert(img::Matrix{RGBA{N0f8}}, ::Type{Vector{UInt8}}, num_threads::Int = 1)
    return generate_dds_bytes(img, num_threads)
end

end # module
